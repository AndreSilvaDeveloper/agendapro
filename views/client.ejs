<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <title><%= client.name %> – Detalhes</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link
    href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
    rel="stylesheet"
  >
</head>
<body class="bg-gray-100 p-6">

  <!-- HEADER -->
  <header class="bg-white shadow-md relative mb-6">
    <div class="max-w-4xl mx-auto px-4 py-3 flex items-center justify-between">
      <h1 class="text-2xl font-bold text-purple-700">Studio Kadosh</h1>
      <!-- Navegação -->
      <nav class="hidden md:flex space-x-6 items-center">
        <a href="/agendamentos-por-dia" class="text-gray-600 hover:text-gray-900">Agendamentos</a>
        <a href="/clients"              class="text-gray-600 hover:text-gray-900">Clientes</a>
        <a href="/financeiro"           class="text-gray-600 hover:text-gray-900">Financeiro</a>
        <a href="/balanco"              class="text-gray-600 hover:text-gray-900">Balanço Geral</a>
        <a href="/expenses"             class="text-gray-600 hover:text-gray-900">Despesas</a>
        <a href="/logout"               class="text-red-600 hover:text-red-800">Sair</a>
      </nav>
      <button id="menu-button" class="md:hidden p-2 rounded hover:bg-gray-200 focus:outline-none">
        <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </div>
    <div id="mobile-menu" class="hidden absolute top-full left-0 w-full bg-white shadow-md z-10 px-4 pb-4 flex-col space-y-2 md:hidden">
      <a href="/agendamentos-por-dia" class="block bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700">📅 Agendamentos</a>
      <a href="/clients"              class="block bg-blue-600   text-white px-4 py-2 rounded hover:bg-blue-700">👥 Clientes</a>
      <a href="/financeiro"           class="block bg-green-600  text-white px-4 py-2 rounded hover:bg-green-700">💵 Financeiro</a>
      <a href="/balanco"              class="block bg-yellow-600 text-white px-4 py-2 rounded hover:bg-yellow-700">⚖️ Balanço Geral</a>
      <a href="/expenses"             class="block bg-pink-600   text-white px-4 py-2 rounded hover:bg-pink-700">💸 Despesas</a>
      <a href="/logout"               class="block bg-red-600    text-white px-4 py-2 rounded hover:bg-red-700">⬅️ Sair</a>
    </div>
    <script>
      document.getElementById('menu-button')
        .addEventListener('click', () => document.getElementById('mobile-menu').classList.toggle('hidden'));
    </script>
  </header>

  <div class="max-w-3xl mx-auto bg-white p-6 rounded shadow">

    <!-- Voltar + Título -->
    <div class="flex items-center justify-between mb-4">
      <div class="flex items-center space-x-2">
        <a href="/" class="text-gray-600 hover:text-gray-800">⬅ Voltar</a>
        <h1 class="text-2xl font-bold">Cliente: <%= client.name %></h1>
      </div>
      <div class="flex gap-4">
        <form action="/client/<%= client._id %>/edit" method="POST"
              onsubmit="return editClient(this, '<%= client.name %>', '<%= client.phone %>')">
          <button class="text-blue-600 hover:underline text-sm">✏️ Editar</button>
        </form>
        <form action="/client/<%= client._id %>/delete" method="POST"
              onsubmit="return confirm('Tem certeza que deseja excluir este cliente?')">
          <button class="text-red-600 hover:underline text-sm">🗑️ Excluir</button>
        </form>
        <a href="/client/<%= client._id %>/historico"
           class="inline-flex items-center bg-yellow-100 text-yellow-800 px-3 py-1.5 rounded text-sm hover:bg-yellow-200">
          📜 Histórico
        </a>
      </div>
    </div>

    <p class="mb-6 text-gray-600">Telefone: <%= client.phone %></p>

    <!-- Novo Agendamento -->
    <h2 class="text-xl font-semibold mb-2">Novo Agendamento</h2>
    <form action="/appointment" method="POST" onsubmit="return processForm()" class="space-y-4 mb-6">
      <input type="hidden" name="clientId" value="<%= client._id %>">
      <input type="date" name="date" required class="w-full p-2 border rounded">
      <input type="time" name="time" required class="w-full p-2 border rounded">
      <input type="number" name="duration" placeholder="Duração (min)" required class="w-full p-2 border rounded">

      <div>
        <h3 class="font-semibold text-lg mb-2">Serviços</h3>
        <div id="services" class="space-y-2"></div>
        <button type="button" onclick="addService()" class="bg-green-500 text-white px-3 py-1 rounded">
          + Adicionar Serviço
        </button>
      </div>

      <input type="hidden" name="services" id="servicesInput">
      <input type="hidden" name="products" id="productsInput">

      <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
        Agendar
      </button>
    </form>

    <!-- Lista de Agendamentos -->
    <h2 class="text-xl font-semibold mb-3">Agendamentos</h2>

    <% const visible = appointments.filter(a => a.services.length + a.products.length > 0); %>
    <% if (!visible.length) { %>
      <p class="text-gray-500">Nenhum agendamento.</p>
    <% } else { %>
      <ul class="space-y-4">
        <% visible.forEach(a => {
             // separa data e hora do campo 'formatted' (já no fuso SP)
             const [datePart, , timePart] = a.formatted.split(' ');
        %>
          <li class="p-4 bg-gray-50 rounded border">

            <div class="flex justify-between items-center mb-2">
              <strong>
                <%= a.formatted %> (<%= a.duration %> min)
              </strong>

              <form action="/appointment/<%= a._id %>/edit-datetime" method="POST"
                    onsubmit='return editDateTime(this, "<%= datePart %>", "<%= timePart %>")'>
                <button class="text-blue-600 text-sm hover:underline">
                  📅✏️ Altera Data/Hora
                </button>
              </form>

              <form action="/appointment/<%= a._id %>/cancel" method="POST"
                    onsubmit="return confirm('Deseja cancelar este agendamento?')">
                <button class="text-red-600 hover:underline text-sm">Cancelar</button>
              </form>
            </div>

            <!-- Serviços -->
            <% if (a.services.length) { %>
              <div>
                <span class="font-semibold">Serviços:</span>
                <ul class="list-disc pl-6 mt-1 space-y-1">
                  <% a.services.forEach((s,i) => { %>
                    <li class="flex justify-between items-start">
                      <div>
                        <%= s.name %> – R$ <%= s.price.toFixed(2) %>
                      </div>
                      <div class="flex gap-2 text-sm">
                        <form action="/appointment/<%= a._id %>/pay-service/<%= i %>" method="POST"
                              onsubmit="return pagarValor(this)">
                          <button class="text-green-600 hover:underline">💰 Pagar</button>
                        </form>
                        <form action="/appointment/<%= a._id %>/edit-service/<%= i %>" method="POST"
                              onsubmit="return editItem(this,'<%= s.name %>','<%= s.price %>')">
                          <button class="text-blue-600 hover:underline">✏️ Editar</button>
                        </form>
                        <form action="/appointment/<%= a._id %>/remove-service/<%= i %>" method="POST"
                              onsubmit="return confirm('Excluir serviço?')">
                          <button class="text-red-600 hover:underline">🗑️ Excluir</button>
                        </form>
                      </div>
                    </li>
                  <% }) %>
                </ul>
              </div>
            <% } %>

          </li>
        <% }) %>
      </ul>
    <% } %>

    <!-- Totais -->
    <div class="mt-6 space-y-2">
      <h3 class="text-lg font-semibold">
        Total por Serviços: <span class="text-green-600">R$ <%= totalService.toFixed(2) %></span>
      </h3>
      <h3 class="text-lg font-semibold">
        Total Pago em Serviços: <span class="text-blue-700">R$ <%= totalPaidService.toFixed(2) %></span>
      </h3>
      <h3 class="text-lg font-semibold">
        Total por Produtos: <span class="text-purple-600">R$ <%= totalProduct.toFixed(2) %></span>
      </h3>
      <h3 class="text-lg font-semibold">
        Total Pago em Produtos: <span class="text-blue-700">R$ <%= totalPaidProduct.toFixed(2) %></span>
      </h3>
      <h2 class="text-xl font-bold mt-2">
        Total Restante:
        <span class="text-red-600">
          R$ <%= (totalService + totalProduct - (totalPaidService + totalPaidProduct)).toFixed(2) %>
        </span>
      </h2>
    </div>

    <a href="/" class="inline-block mt-6 bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700">
      🚪 Voltar
    </a>
  </div>


  <script>
    function addService() {
      const c = document.getElementById('services');
      const d = document.createElement('div');
      d.className = 'flex gap-2';
      d.innerHTML = `
        <input type="text" placeholder="Nome do serviço" class="p-2 border rounded w-1/2 service-name">
        <input type="number" placeholder="Preço" class="p-2 border rounded w-1/2 service-price">
      `;
      c.appendChild(d);
    }
    function addProduct() {
      const c = document.getElementById('products');
      const d = document.createElement('div');
      d.className = 'flex gap-2';
      d.innerHTML = `
        <input type="text" placeholder="Nome do produto" class="p-2 border rounded w-1/2 product-name">
        <input type="number" placeholder="Preço" class="p-2 border rounded w-1/2 product-price">
      `;
      c.appendChild(d);
    }
    function processForm() {
      const sv = [], pr = [];
      document.querySelectorAll('.service-name').forEach((el,i) => {
        const n = el.value.trim(), p = parseFloat(
          document.querySelectorAll('.service-price')[i].value
        );
        if (n && !isNaN(p)) sv.push({name:n,price:p});
      });
      document.querySelectorAll('.product-name').forEach((el,i) => {
        const n = el.value.trim(), p = parseFloat(
          document.querySelectorAll('.product-price')[i].value
        );
        if (n && !isNaN(p)) pr.push({name:n,price:p});
      });
      document.getElementById('servicesInput').value = JSON.stringify(sv);
      document.getElementById('productsInput').value = JSON.stringify(pr);
      return true;
    }


    function pagarValor(form) {
  // valor
  const v = prompt('Informe o valor pago:');
  const num = parseFloat(v);
  if (!v || isNaN(num) || num <= 0) { alert('Valor inválido.'); return false; }

  // método
  let m = prompt('Forma de pagamento (Pix / Dinheiro / Cartão):');
  if (!m) return false;
  m = m.trim().toLowerCase();
  let key;
  if (m === 'pix') key = 'Pix';
  else if (m === 'dinheiro') key = 'Dinheiro';
  else if (m === 'cartão' || m === 'cartao') key = 'Cartão';
  else { alert('Forma inválida. Use Pix, Dinheiro ou Cartão.'); return false; }

  // descrição
  const desc = prompt('Descrição (opcional):');

  // nova: data do pagamento (DD/MM/YYYY)
  const today = new Date();
  const pad = n => n.toString().padStart(2,'0');
  const defaultDate = `${pad(today.getDate())}/${pad(today.getMonth()+1)}/${today.getFullYear()}`;
  const dateStr = prompt('Data do pagamento (DD/MM/YYYY):', defaultDate);
  if (!dateStr) return false;
  if (!/^(\d{2})\/(\d{2})\/(\d{4})$/.test(dateStr)) {
    alert('Data inválida. Use DD/MM/YYYY.');
    return false;
  }
  // converte pra ISO para o backend interpretar
  const [, dd, mm, yyyy] = dateStr.match(/^(\d{2})\/(\d{2})\/(\d{4})$/);
  const isoDate = `${yyyy}-${mm}-${dd}T00:00:00Z`;

  // remove inputs antigos, se houver
  form
    .querySelectorAll('input[name="amount"], input[name="method"], input[name="description"], input[name="paidAt"]')
    .forEach(i => i.remove());

  // amount
  const ia = document.createElement('input');
  ia.type = 'hidden'; ia.name = 'amount';     ia.value = num;
  form.appendChild(ia);

  // method
  const im = document.createElement('input');
  im.type = 'hidden'; im.name = 'method';     im.value = key;
  form.appendChild(im);

  // description
  if (desc) {
    const id = document.createElement('input');
    id.type = 'hidden'; id.name = 'description'; id.value = desc;
    form.appendChild(id);
  }

  // paidAt (ISO)
  const ip = document.createElement('input');
  ip.type = 'hidden'; ip.name = 'paidAt';      ip.value = isoDate;
  form.appendChild(ip);

  return true;
}



function editItem(form, oldName, oldPrice) {
      const n = prompt('Novo nome:', oldName); if(n===null) return false;
      const p = prompt('Novo preço:', oldPrice); if(p===null) return false;
      const i1=document.createElement('input');i1.type='hidden';i1.name='name';i1.value=n;form.appendChild(i1);
      const i2=document.createElement('input');i2.type='hidden';i2.name='price';i2.value=p;form.appendChild(i2);
      return true;
    }
    function editClient(form, oldName, oldPhone) {
      const n=prompt('Novo nome do cliente:',oldName); if(n===null) return false;
      const ph=prompt('Novo telefone:',oldPhone); if(ph===null) return false;
      const i1=document.createElement('input');i1.type='hidden';i1.name='name';i1.value=n;form.appendChild(i1);
      const i2=document.createElement('input');i2.type='hidden';i2.name='phone';i2.value=ph;form.appendChild(i2);
      return true;
    }
function editDateTime(form, oldDate, oldTime) {
  // oldDate vem como "YYYY-MM-DD"
  const [year, month, day] = oldDate.split('-');
  const formattedOld = `${day}/${month}/${year}`;                  // pra exibir no prompt

  const userDate = prompt('Nova data (DD/MM/YYYY):', formattedOld);
  if (userDate === null) return false;

  // validação simples de máscara
  const dateMatch = userDate.match(/^(\d{2})\/(\d{2})\/(\d{4})$/);
  if (!dateMatch) {
    alert('Data inválida. Use DD/MM/YYYY.');
    return false;
  }
  const [, d, m, y] = dateMatch;
  const isoDate = `${y}-${m}-${d}`;                                // converte pra ISO

  const userTime = prompt('Novo horário (HH:MM):', oldTime);
  if (userTime === null) return false;
  if (!/^\d{2}:\d{2}$/.test(userTime)) {
    alert('Horário inválido. Use HH:MM.');
    return false;
  }

  // campos hidden só com ISO + HH:MM
  const i1 = document.createElement('input');
  i1.type = 'hidden'; i1.name = 'date'; i1.value = isoDate;
  form.appendChild(i1);

  const i2 = document.createElement('input');
  i2.type = 'hidden'; i2.name = 'time'; i2.value = userTime;
  form.appendChild(i2);

  return true;
}


  </script>
</body>
</html>
