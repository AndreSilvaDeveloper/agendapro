<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <title>Agendamentos da Semana – Studio Kadosh</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        :root {
            --color-gold-light: #FFD700;
            --color-gold-dark: #B8860B;
            --color-gold-accent: #DAA520;
        }

        .text-gold { color: var(--color-gold-dark); }
        .bg-gold { background-color: var(--color-gold-accent); }
        .bg-gold-light { background-color: #FFFBEB; }
        .border-gold { border-color: var(--color-gold-light); }
        .hover\:text-gold:hover { color: var(--color-gold-dark); }
        .hover\:bg-gold-light:hover { background-color: #FFF8DC; }

        .animate-fade-in { animation: fadeIn 0.5s ease-in; }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .appointment-card { transition: all 0.3s ease; border-left: 4px solid transparent; }
        .appointment-card:hover { border-left-color: var(--color-gold-dark); background-color: #fcfcfc; }

        .time-badge {
            background-color: #fefce8;
            color: #b45309;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 600;
        }

        /* --- ESTILOS PARA BRILHO --- */
        .text-gradient-gold {
            background: linear-gradient(90deg, #B8860B, #FFD700, #DAA520, #FFD700, #B8860B);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-fill-color: transparent;
            background-size: 200% auto;
            animation: text-shine 4s linear infinite;
        }
        @keyframes text-shine {
            from { background-position: 200% center; }
            to { background-position: 0% center; }
        }
        .bg-shine-gold { position: relative; overflow: hidden; }
        .bg-shine-gold::after {
            content: '';
            position: absolute;
            top: -10%;
            left: -75%;
            width: 50%;
            height: 120%;
            background: linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.4) 50%, rgba(255,255,255,0) 100%);
            transform: skewX(-25deg);
            animation: bg-shine 5s infinite linear;
        }
        @keyframes bg-shine {
            0% { left: -75%; }
            100% { left: 125%; }
        }
        /* --- FIM ESTILOS BRILHO --- */

        .card-hover { transition: all 0.3s ease; }
        .card-hover:hover { transform: translateY(-2px); box-shadow: 0 20px 25px -5px rgba(0,0,0,0.1), 0 10px 10px -5px rgba(0,0,0,0.04); }
        .time-slot { transition: all 0.2s ease; }
        .time-slot:hover { transform: scale(1.05); }
        .day-header { background-color: #f9fafb; }
        .weekday-badge { display: inline-flex; align-items: center; padding: 0.5rem 1rem; border-radius: 9999px; font-size: 0.875rem; font-weight: 600; }
        .today-badge { background-color: #fef3c7; color: #92400e; }
        .future-badge { background-color: #dbeafe; color: #1e40af; }
        .past-badge { background-color: #f3f4f6; color: #4b5563; }
    </style>
</head>
<body class="min-h-screen bg-gray-50 font-sans antialiased">
    <header class="bg-white sticky top-0 z-50 shadow-sm border-b border-gray-100">
        <div class="max-w-7xl mx-auto px-4 py-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <button onclick="history.back()" class="flex items-center space-x-2 text-gold hover:text-gold-dark transition-colors">
                        <i class="fas fa-arrow-left"></i>
                        <span class="hidden sm:inline">Voltar</span>
                    </button>
                    <div class="h-6 w-px bg-gray-200"></div>
                    <h1 class="flex items-center">
                        <img src="/images/kadosh.jpg" alt="Studio Kadosh Logo" class="h-9">
                    </h1>
                    <div class="h-6 w-px bg-gray-200"></div>
                    <span class="text-lg font-semibold text-gray-700 flex items-center">
                        <i class="fas fa-calendar-week mr-2 text-gold"></i>
                        Agendamentos da Semana
                    </span>
                </div>

                <nav class="hidden lg:flex items-center space-x-6">
                    <a href="/dashboard" class="text-gray-600 hover:text-gold transition-colors"><i class="fas fa-home mr-2"></i>Dashboard</a>
                    <a href="/agendamentos-por-dia" class="text-gradient-gold font-semibold"><i class="fas fa-calendar-alt mr-2"></i>Agendamentos</a>
                    <a href="/clients" class="text-gray-600 hover:text-gold transition-colors"><i class="fas fa-users mr-2"></i>Clientes</a>
                    <a href="/financeiro" class="text-gray-600 hover:text-gold transition-colors"><i class="fas fa-dollar-sign mr-2"></i>Financeiro</a>
                    <a href="/balanco" class="text-gray-600 hover:text-gold transition-colors"><i class="fas fa-balance-scale mr-2"></i>Balanço</a>
                    <a href="/expenses" class="text-gray-600 hover:text-gold transition-colors"><i class="fas fa-receipt mr-2"></i>Despesas</a>
                    <a href="/logout" class="text-red-600 hover:text-red-700 transition-colors"><i class="fas fa-sign-out-alt mr-2"></i>Sair</a>
                </nav>

                <button id="menu-button" class="lg:hidden p-2 rounded-lg hover:bg-gray-100 transition-colors">
                    <i class="fas fa-bars text-gradient-gold"></i>
                </button>
            </div>

            <div id="mobile-menu" class="hidden lg:hidden mt-4 space-y-2">
                <a href="/dashboard" class="flex items-center space-x-3 p-3 rounded-lg text-gray-700 hover:bg-gray-100 hover:text-gold"><i class="fas fa-home"></i><span>Dashboard</span></a>
                <a href="/agendamentos-por-dia" class="flex items-center space-x-3 p-3 rounded-lg bg-gold-light text-gold font-semibold"><i class="fas fa-calendar-alt"></i><span>Agendamentos</span></a>
                <a href="/clients" class="flex items-center space-x-3 p-3 rounded-lg text-gray-700 hover:bg-gray-100 hover:text-gold"><i class="fas fa-users"></i><span>Clientes</span></a>
                <a href="/financeiro" class="flex items-center space-x-3 p-3 rounded-lg text-gray-700 hover:bg-gray-100 hover:text-gold"><i class="fas fa-dollar-sign"></i><span>Financeiro</span></a>
                <a href="/balanco" class="flex items-center space-x-3 p-3 rounded-lg text-gray-700 hover:bg-gray-100 hover:text-gold"><i class="fas fa-balance-scale"></i><span>Balanço</span></a>
                <a href="/expenses" class="flex items-center space-x-3 p-3 rounded-lg text-gray-700 hover:bg-gray-100 hover:text-gold"><i class="fas fa-receipt"></i><span>Despesas</span></a>
                <a href="/logout" class="flex items-center space-x-3 p-3 rounded-lg text-red-600 hover:bg-red-100"><i class="fas fa-sign-out-alt"></i><span>Sair</span></a>
            </div>
        </div>
    </header>

    <main class="max-w-7xl mx-auto px-4 py-8 space-y-8 relative"
          data-default-date="<%= (typeof date !== 'undefined' && date) ? date : '' %>">

        <section class="bg-white rounded-2xl shadow-lg overflow-hidden card-hover animate-fade-in">
            <div class="bg-gold p-6 bg-shine-gold">
                <h2 class="text-xl font-bold text-white flex items-center">
                    <i class="fas fa-filter mr-3"></i>
                    Filtrar por Data
                </h2>
            </div>
            <div class="p-6">
                <form method="GET" action="/agendamentos-por-dia" class="flex flex-col sm:flex-row items-start sm:items-end gap-4">
                    <div class="flex-1 w-full sm:w-auto">
                        <label for="date" class="block text-sm font-medium text-gray-700 mb-2">
                            <i class="fas fa-calendar mr-2 text-gold"></i>
                            Selecionar Dia
                        </label>
                        <input id="date" type="date" name="date"
                               value="<%= (typeof date !== 'undefined' && date) ? date : '' %>"
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gold-dark focus:border-transparent transition-all">
                    </div>
                    <button type="submit" class="bg-gold text-white px-6 py-3 rounded-lg font-semibold hover:opacity-90 transition-opacity">
                        <i class="fas fa-search mr-2"></i>
                        Buscar Agendamentos
                    </button>
                </form>
            </div>
        </section>

        <section class="bg-white rounded-2xl shadow-lg overflow-hidden card-hover animate-fade-in">
            <div class="bg-gold p-6 bg-shine-gold">
                <h2 class="text-xl font-bold text-white flex items-center">
                    <i class="fas fa-chart-bar mr-3"></i>
                    Resumo da Semana (Ter–Sáb)
                </h2>
            </div>
            <div class="p-6">
                <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <%
                    let totalAgendamentos = 0;
                    let totalHorariosLivres = 0;
                    let diasComAgendamento = 0;

                    if (typeof days !== 'undefined' && days) {
                        days.forEach(d => {
                            const key = d.format('YYYY-MM-DD');
                            const agendados = (typeof resultsByDay !== 'undefined' && resultsByDay[key]) ? resultsByDay[key].length : 0;
                            const livres = (typeof availableByDay !== 'undefined' && availableByDay[key]) ? availableByDay[key].length : 0;

                            totalAgendamentos += agendados;
                            totalHorariosLivres += livres;
                            if (agendados > 0) diasComAgendamento++;
                        });
                    }
                    %>

                    <div class="bg-blue-50 p-4 rounded-xl border border-blue-200">
                        <div class="flex items-center justify-between">
                            <div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                                <i class="fas fa-calendar-check text-blue-600"></i>
                            </div>
                            <div class="text-right">
                                <div class="text-2xl font-bold text-blue-800"><%= totalAgendamentos %></div>
                                <div class="text-sm text-blue-600">Agendamentos</div>
                            </div>
                        </div>
                    </div>

                    <div class="bg-green-50 p-4 rounded-xl border border-green-200">
                        <div class="flex items-center justify-between">
                            <div class="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                                <i class="fas fa-clock text-green-600"></i>
                            </div>
                            <div class="text-right">
                                <div class="text-2xl font-bold text-green-800"><%= totalHorariosLivres %></div>
                                <div class="text-sm text-green-600">Horários Livres</div>
                            </div>
                        </div>
                    </div>

                    <div class="bg-purple-50 p-4 rounded-xl border border-purple-200">
                        <div class="flex items-center justify-between">
                            <div class="w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center">
                                <i class="fas fa-calendar-day text-purple-600"></i>
                            </div>
                            <div class="text-right">
                                <div class="text-2xl font-bold text-purple-800"><%= diasComAgendamento %></div>
                                <div class="text-sm text-purple-600">Dias Ocupados</div>
                            </div>
                        </div>
                    </div>

                    <div class="bg-yellow-50 p-4 rounded-xl border border-yellow-200">
                        <div class="flex items-center justify-between">
                            <div class="w-10 h-10 bg-yellow-100 rounded-full flex items-center justify-center">
                                <i class="fas fa-percentage text-yellow-600"></i>
                            </div>
                            <div class="text-right">
                                <div class="text-2xl font-bold text-yellow-800">
                                    <%= totalAgendamentos + totalHorariosLivres > 0 ? Math.round((totalAgendamentos / (totalAgendamentos + totalHorariosLivres)) * 100) : 0 %>%
                                </div>
                                <div class="text-sm text-yellow-600">Taxa Ocupação</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <%
        // Mapa de dias em inglês → português
        const weekdayMap = {
            Monday: 'Segunda-feira',
            Tuesday: 'Terça-feira',
            Wednesday: 'Quarta-feira',
            Thursday: 'Quinta-feira',
            Friday: 'Sexta-feira',
            Saturday: 'Sábado',
            Sunday: 'Domingo'
        };

        const today = new Date();
        today.setHours(0, 0, 0, 0);
        %>

        <div class="space-y-6">
            <% if (typeof days !== 'undefined' && days && days.length > 0 && typeof resultsByDay !== 'undefined' && typeof availableByDay !== 'undefined') { %>
                <% days.forEach((d, index) => {
                    const key = d.format('YYYY-MM-DD');
                    const dayDate = new Date(key + 'T00:00:00-03:00'); // Força fuso SP para comparação
                    const isToday = dayDate.toDateString() === today.toDateString();
                    const isPast = dayDate < today;
                    const isFuture = dayDate > today && !isToday;

                    let badgeClass = 'future-badge';
                    let dayIcon = 'fas fa-calendar-day';

                    if (isToday) {
                        badgeClass = 'today-badge';
                        dayIcon = 'fas fa-calendar-check';
                    } else if (isPast) {
                        badgeClass = 'past-badge';
                        dayIcon = 'fas fa-history';
                    }

                    const agendadosList = resultsByDay[key] || [];
                    const livresList = availableByDay[key] || [];
                %>
                <section class="bg-white rounded-2xl shadow-lg overflow-hidden card-hover animate-fade-in">
                    <div class="day-header p-6 border-b border-gray-200">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-4">
                                <div class="w-12 h-12 bg-gold rounded-full flex items-center justify-center">
                                    <i class="<%= dayIcon %> text-white"></i>
                                </div>
                                <div>
                                    <h2 class="text-xl font-bold text-gray-900"><%= d.format('DD/MM/YYYY') %></h2>
                                    <p class="text-gray-600"><%= weekdayMap[d.format('dddd')] %></p>
                                </div>
                            </div>
                            <div class="flex items-center space-x-3">
                                <span class="weekday-badge <%= badgeClass %>">
                                    <% if (isToday) { %><i class="fas fa-star mr-1"></i>Hoje
                                    <% } else if (isPast) { %><i class="fas fa-history mr-1"></i>Passado
                                    <% } else { %><i class="fas fa-calendar mr-1"></i>Futuro<% } %>
                                </span>
                                <%
                                const agendadosCount = agendadosList.length;
                                const livresCount = livresList.length;
                                %>
                                <span class="text-sm text-gray-600 bg-gray-100 px-3 py-1 rounded-full">
                                    <%= agendadosCount %> agendado<%= agendadosCount !== 1 ? 's' : '' %>
                                </span>
                            </div>
                        </div>
                    </div>

                    <div class="p-6">
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                            <div>
                                <div class="flex items-center justify-between mb-4">
                                    <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                                        <i class="fas fa-user-clock mr-2 text-gold"></i>
                                        Agendamentos
                                    </h3>
                                    <% if (agendadosList.length > 0) { %>
                                    <span class="bg-gold-light text-gold-dark px-3 py-1 rounded-full text-sm font-medium"><%= agendadosList.length %></span>
                                    <% } %>
                                </div>

                                <%# --- Loop de Agendamentos --- %>
                                <% if (agendadosList.length > 0) { %>
                                <div class="space-y-4">
                                    <% agendadosList.forEach(r => { %>
                                    <div class="appointment-card p-4 rounded-xl border border-l-4 <%= r.status === 'pendente' ? 'appointment-pending border-yellow-400 bg-yellow-50' : 'border-gray-200 bg-white' %>">
                                        <div class="flex items-center justify-between mb-2">
                                            <div class="flex items-center space-x-3">
                                                <div class="w-10 h-10 bg-gold-light rounded-full flex items-center justify-center">
                                                    <i class="fas fa-user text-gold text-sm"></i>
                                                </div>
                                                <div>
                                                    <div class="font-semibold text-gray-900">
                                                        <a href="/client/<%= r.clientId %>" class="text-gold hover:text-gold-dark transition-colors"><%= r.clientName %></a>
                                                    </div>
                                                    <div class="text-sm text-gray-600">
                                                        <i class="fas fa-concierge-bell mr-1"></i>
                                                        <%= r.servicesNames || 'Serviço não especificado' %>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="text-right">
                                                <div class="bg-gold-light text-gold-dark px-3 py-1 rounded-full text-sm font-bold">
                                                    <i class="fas fa-clock mr-1"></i>
                                                    <%= r.timeFormatted %>
                                                </div>
                                            </div>
                                        </div>

                                        <% if (r.status === 'pendente') { %>
                                        <div class="mt-3 pt-3 border-t border-yellow-200 flex flex-wrap justify-end gap-2">
                                            <form action="/admin/appointment/<%= r._id %>/cancel-by-admin" method="POST" onsubmit="return promptCancelReason(this)">
                                                <button type="submit" class="px-3 py-1 text-xs font-medium text-red-600 bg-red-100 border border-red-200 rounded-md hover:bg-red-200 transition-colors">
                                                    <i class="fas fa-times mr-1"></i> Cancelar
                                                </button>
                                            </form>
                                            <form action="/admin/appointment/<%= r._id %>/confirm" method="POST">
                                                <button type="submit" class="px-3 py-1 text-xs font-medium text-green-700 bg-green-100 border border-green-200 rounded-md hover:bg-green-200 transition-colors">
                                                    <i class="fas fa-check mr-1"></i> Confirmar
                                                </button>
                                            </form>
                                        </div>
                                        <% } %>
                                    </div>
                                    <% }); %>
                                </div>
                                <% } else { %>
                                <div class="text-center py-8">
                                    <div class="w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
                                        <i class="fas fa-calendar-times text-2xl text-gray-400"></i>
                                    </div>
                                    <p class="text-gray-500 font-medium">Nenhum agendamento</p>
                                    <p class="text-sm text-gray-400 mt-1">Dia livre para descanso ou novos clientes</p>
                                </div>
                                <% } %>
                            </div>

                            <div>
                                <div class="flex items-center justify-between mb-4">
                                    <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                                        <i class="fas fa-clock mr-2 text-green-600"></i>
                                        Horários Disponíveis
                                    </h3>
                                    <% if (livresList.length > 0) { %>
                                    <span class="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium"><%= livresList.length %></span>
                                    <% } %>
                                </div>

                                <% if (livresList.length > 0) { %>
                                <div class="bg-green-50 p-4 rounded-xl border border-green-200">
                                    <div class="flex flex-wrap gap-2">
                                        <% livresList.forEach(t => { %>
                                        <span class="time-slot bg-green-100 text-green-800 px-3 py-2 rounded-lg text-sm font-medium hover:bg-green-200 cursor-pointer transition-all">
                                            <i class="fas fa-clock mr-1"></i>
                                            <%= t %>
                                        </span>
                                        <% }); %>
                                    </div>
                                    <div class="mt-3 text-sm text-green-700 flex items-center">
                                        <i class="fas fa-info-circle mr-2"></i>
                                        Horários de funcionamento: 07:00 às 20:00
                                    </div>
                                </div>
                                <% } else { %>
                                <div class="text-center py-8">
                                    <div class="w-16 h-16 mx-auto mb-4 bg-red-100 rounded-full flex items-center justify-center">
                                        <i class="fas fa-calendar-times text-2xl text-red-400"></i>
                                    </div>
                                    <p class="text-red-500 font-medium">Sem horários livres</p>
                                    <p class="text-sm text-red-400 mt-1">Dia completamente ocupado</p>
                                </div>
                                <% } %>
                            </div>

                            <div id="toast-success" class="fixed top-5 right-5 z-50 hidden bg-green-100 border border-green-400 text-green-800 px-6 py-4 rounded-lg shadow-lg flex items-center space-x-3">
                              <i class="fas fa-check-circle text-green-600"></i>
                              <span id="toast-message" class="font-semibold"></span>
                            </div>
                        </div>
                    </div>
                </section>
                <% }); %>
            <% } else { %>
            <section class="bg-white rounded-2xl shadow-lg overflow-hidden card-hover animate-fade-in">
                <div class="p-12 text-center">
                    <div class="w-24 h-24 mx-auto mb-6 bg-gray-100 rounded-full flex items-center justify-center">
                        <i class="fas fa-calendar-alt text-4xl text-gray-400"></i>
                    </div>
                    <h3 class="text-xl font-semibold text-gray-900 mb-2">Nenhum agendamento encontrado</h3>
                    <p class="text-gray-600 mb-6">Selecione uma data no filtro acima para visualizar os agendamentos.</p>
                    <button onclick="document.getElementById('date').focus()" class="bg-gold text-white px-6 py-3 rounded-lg font-semibold hover:opacity-90 transition-opacity">
                        <i class="fas fa-calendar mr-2"></i>
                        Selecionar Data
                    </button>
                </div>
            </section>
            <% } %>
        </div>

        <div id="modalAgendamento" class="absolute bg-white rounded-lg p-6 w-full max-w-md hidden z-50 shadow-xl border border-gray-300">
          <h2 class="text-lg font-bold mb-4 text-gray-800">Agendar Horário</h2>
          <form action="/appointment" method="POST">
            <input type="hidden" id="modalDate" name="date">
            <input type="hidden" id="modalTime" name="time">

            <div class="mb-4">
              <label for="clientSearch" class="block text-sm font-medium text-gray-700">Cliente:</label>
              <input type="text" id="clientSearch" class="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-gold-dark" placeholder="Digite o nome do cliente..." autocomplete="off" required>
              <input type="hidden" name="clientId" id="clientId">
              <ul id="clientSuggestions" class="border border-gray-300 rounded mt-1 bg-white max-h-40 overflow-y-auto hidden"></ul>
            </div>

            <div class="mb-4">
              <label class="block text-sm font-medium text-gray-700">Serviço:</label>
              <input type="text" id="serviceName" class="w-full p-2 border border-gray-300 rounded mb-2 focus:ring-2 focus:ring-gold-dark" placeholder="Nome do serviço" required>
              <input type="number" id="servicePrice" class="w-full p-2 border border-gray-300 rounded mb-2 focus:ring-2 focus:ring-gold-dark" placeholder="Preço (R$)" required step="0.01">
              <input type="number" id="serviceDuration" class="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-gold-dark" placeholder="Duração (min)" required>
              <input type="hidden" name="services" id="servicesInput">
              <input type="hidden" name="duration" id="durationInput">
            </div>

            <div class="flex justify-end gap-4 mt-6">
              <button type="button" onclick="fecharModal()" class="text-gray-500 hover:text-gray-700">Cancelar</button>
              <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">Agendar</button>
            </div>
          </form>
        </div>
    </main>

    <footer class="bg-white border-t border-gray-200 mt-12">
        <div class="max-w-7xl mx-auto px-4 py-6">
            <div class="text-center text-gray-600">
                <p class="flex items-center justify-center">
                    <i class="fas fa-crown mr-2 text-gold"></i>
                    Studio Kadosh © <%= new Date().getFullYear() %>
                    <i class="fas fa-heart ml-2 text-red-500"></i>
                </p>
            </div>
        </div>
    </footer>

    <% if (typeof clients !== 'undefined' && clients) { %>
      <div id="clients-data" class="hidden" data-clients='<%- JSON.stringify(clients) %>'></div>
    <% } else { %>
      <div id="clients-data" class="hidden" data-clients='[]'></div>
    <% } %>

    <% if (typeof pendingAppointments !== 'undefined' && pendingAppointments) { %>
      <div id="pending-data" class="hidden" data-pending='<%- JSON.stringify(pendingAppointments) %>'></div>
    <% } else { %>
      <div id="pending-data" class="hidden" data-pending='[]'></div>
    <% } %>

<script>
  // Evita erro se 'clients-data' não existir
  const clientsDataElement = document.getElementById('clients-data');
  const raw = clientsDataElement ? clientsDataElement.dataset.clients : '[]';
  let clients = [];
  try {
      clients = JSON.parse(raw);
  } catch(e) {
      console.error("Erro ao parsear dados de clientes:", e);
      clients = []; // Garante que clients seja um array
  }
</script>

<script>
  // Mobile menu toggle
  const menuButton = document.getElementById('menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  if (menuButton && mobileMenu) {
    menuButton.addEventListener('click', () => mobileMenu.classList.toggle('hidden'));
  }

  // Inicialização + ALERTA de pendentes
  document.addEventListener('DOMContentLoaded', function () {
    const observerOptions = { threshold: 0.1, rootMargin: '0px 0px -50px 0px' };
    const observer = new IntersectionObserver(function (entries) {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.style.opacity = '1';
          entry.target.style.transform = 'translateY(0)';
        }
      });
    }, observerOptions);

    document.querySelectorAll('.animate-fade-in').forEach(el => {
      el.style.opacity = '0';
      el.style.transform = 'translateY(20px)';
      el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
      observer.observe(el);
    });

    // Define a data de hoje como padrão se não houver valor
    const dateInput = document.getElementById('date');
    if (dateInput && !dateInput.value) {
      const defaultDate = document.querySelector('main').dataset.defaultDate;
      if (defaultDate) {
        dateInput.value = defaultDate;
      } else {
        const today = new Date();
        const formattedDate = today.toISOString().split('T')[0];
        dateInput.value = formattedDate;
      }
    }

    // ======================================================
    // ===  Alerta de Agendamentos Pendentes (robusto)    ===
    // ======================================================
    console.log("--- [Agenda-Dia] Iniciando verificação de Agendamentos Pendentes ---");
    if (window.__pendenteAlertShown) {
      console.log("[Agenda-Dia] Alerta já exibido neste load. Abortando.");
      return;
    }

    // Função fallback: coleta pendentes a partir do DOM renderizado
    function collectPendingFromDOM() {
      const items = [];
      document.querySelectorAll('.appointment-card.appointment-pending').forEach(card => {
        const section = card.closest('section.bg-white');
        const dateH2 = section ? section.querySelector('h2.text-xl') : null;
        const dateText = dateH2 ? dateH2.textContent.trim() : ''; // dd/mm/yyyy
        const m = dateText.match(/(\d{2})\/(\d{2})\/(\d{4})/);

        // Hora (pega o badge dentro do card e limpa ícone/espacos)
        const timeBadge = card.querySelector('div.bg-gold-light.text-gold-dark.text-sm.font-bold') || card.querySelector('div.bg-gold-light.text-gold-dark');
        let timeText = timeBadge ? timeBadge.textContent : '';
        timeText = (timeText || '').replace(/[^\d:]/g, '').slice(0,5); // HH:MM

        // Cliente
        const clientAnchor = card.querySelector('.font-semibold a, a.text-gold');
        const clientName = clientAnchor ? clientAnchor.textContent.trim() : 'Cliente';

        // Serviço
        const serviceEl = card.querySelector('.text-sm.text-gray-600');
        const serviceName = serviceEl ? serviceEl.textContent.trim().replace(/\s+/g,' ') : 'Serviço';

        // ID do agendamento (pega do action do form)
        const cancelForm = card.querySelector('form[action*="/cancel-by-admin"]');
        let id = null;
        if (cancelForm && cancelForm.action) {
          const mId = cancelForm.action.match(/appointment\/([^/]+)\/cancel-by-admin/);
          if (mId) id = mId[1];
        }

        // Monta ISO aproximado para exibir (fuso -03:00)
        let iso = new Date().toISOString();
        if (m && timeText) {
          iso = `${m[3]}-${m[2]}-${m[1]}T${timeText}:00-03:00`;
        }

        items.push({
          _id: id,
          date: iso,
          clientId: { name: clientName },
          staffId: { name: 'Qualquer Profissional' },
          services: [{ name: serviceName }]
        });
      });
      return items;
    }

    try {
      const dataElementPending = document.getElementById('pending-data');
      console.log("[Agenda-Dia] Elemento #pending-data encontrado:", !!dataElementPending);

      let pendingList = [];
      if (dataElementPending) {
        const pendingDataString = dataElementPending.dataset.pending;
        console.log("[Agenda-Dia] String de dados pendentes (data-pending):", pendingDataString);
        if (pendingDataString && pendingDataString !== 'undefined') {
          try {
            pendingList = JSON.parse(pendingDataString || '[]');
          } catch (e) {
            console.warn("[Agenda-Dia] Falha ao parsear data-pending. Usando fallback DOM.", e);
          }
        }
      }

      // Fallback: se vazio, coleta do DOM renderizado
      if (!Array.isArray(pendingList) || pendingList.length === 0) {
        console.log("[Agenda-Dia] Usando fallback: coletando pendentes do DOM…");
        pendingList = collectPendingFromDOM();
        console.log("[Agenda-Dia] Pendentes coletados do DOM:", pendingList);
      }

      if (Array.isArray(pendingList) && pendingList.length > 0) {
        let alertHTML = '<div style="text-align: left; max-height: 400px; overflow-y: auto; padding-right: 15px;">';
        pendingList.forEach(appt => {
          const dateObj = new Date(appt.date);
          const date = isNaN(dateObj.getTime())
            ? ''
            : dateObj.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric' });
          const time = isNaN(dateObj.getTime())
            ? ''
            : dateObj.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
          const clientName = appt?.clientId?.name || 'Cliente';
          const staffName = appt?.staffId?.name || 'Qualquer Profissional';
          const serviceName = (appt?.services && appt.services[0]?.name) ? appt.services[0].name : 'Serviço';

          // Botões só se tivermos _id
          const btns = appt?._id ? `
              <form action="/admin/appointment/${appt._id}/cancel-by-admin" method="POST" onsubmit="return promptCancelReason(this)" style="margin:0;">
                <button type="submit" style="background:#fee2e2;color:#dc2626;border:1px solid #fecaca;padding:5px 10px;font-size:0.8em;font-weight:600;border-radius:5px;cursor:pointer;">
                  <i class="fas fa-times"></i> Cancelar
                </button>
              </form>
              <form action="/admin/appointment/${appt._id}/confirm" method="POST" style="margin:0;">
                <button type="submit" style="background:#dcfce7;color:#16a34a;border:1px solid #bbf7d0;padding:5px 10px;font-size:0.8em;font-weight:600;border-radius:5px;cursor:pointer;">
                  <i class="fas fa-check"></i> Confirmar
                </button>
              </form>` : '';

          alertHTML += `
            <div style="padding:12px;border:1px solid #fce7b6;background:#fffbeb;border-radius:8px;margin-bottom:12px;">
              <div style="font-weight:bold;font-size:1.1em;color:var(--color-gold-dark);">
                <i class="fas fa-user"></i> ${clientName}
              </div>
              <div style="font-size:0.95em;color:#555;margin-top:5px;">
                <i class="fas fa-concierge-bell"></i> ${serviceName}<br>
                <i class="fas fa-user-tie"></i> ${staffName}<br>
                ${(date || time) ? `<i class="fas fa-calendar-alt"></i> ${date}${date && time ? ' às ' : ''}${time}` : ''}
              </div>
              <div style="margin-top:10px;display:flex;justify-content:flex-end;gap:8px;">
                ${btns}
              </div>
            </div>`;
        });
        alertHTML += '</div>';

        Swal.fire({
          iconHtml: '<i class="fas fa-bell fa-beat" style="color:#F59E0B;font-size:2.5em;"></i>',
          title: `Você tem ${pendingList.length} Agendamento${pendingList.length > 1 ? 's' : ''} Pendente${pendingList.length > 1 ? 's' : ''}!`,
          html: alertHTML,
          showCloseButton: true,
          showConfirmButton: false,
          width: '500px',
          background: '#ffffff'
        });

        window.__pendenteAlertShown = true;
        console.log("[Agenda-Dia] Alerta Swal de pendentes disparado.");
      } else {
        console.log("[Agenda-Dia] Nenhum agendamento pendente identificado. Alerta não exibido.");
      }
    } catch (e) {
      console.error("[Agenda-Dia] Erro CRÍTICO ao processar agendamentos pendentes:", e);
    }
    console.log("--- [Agenda-Dia] Fim da verificação de Agendamentos Pendentes ---");
  });

  // Autocompletar cliente
  const clientSearch = document.getElementById('clientSearch');
  const suggestions = document.getElementById('clientSuggestions');
  const clientIdInput = document.getElementById('clientId');

  if (clientSearch && suggestions && clientIdInput) {
    clientSearch.addEventListener('input', () => {
      clientIdInput.value = '';
      const value = clientSearch.value.toLowerCase();
      suggestions.innerHTML = '';
      const matches = Array.isArray(clients) ? clients.filter(c => c && c.name && c.name.toLowerCase().includes(value)) : [];
      if (matches.length > 0) {
        suggestions.classList.remove('hidden');
        matches.forEach(c => {
          const li = document.createElement('li');
          li.textContent = c.name;
          li.className = 'p-2 cursor-pointer hover:bg-gray-100';
          li.addEventListener('click', () => {
            clientSearch.value = c.name;
            clientIdInput.value = c._id;
            suggestions.classList.add('hidden');
          });
          suggestions.appendChild(li);
        });
      } else {
        suggestions.classList.add('hidden');
      }
    });
  }

  // Esconde sugestão ao clicar fora
  document.addEventListener('click', (e) => {
    if (suggestions && !suggestions.contains(e.target) && e.target !== clientSearch) {
      suggestions.classList.add('hidden');
    }
  });

  // Clicar em horário → abre o modal
  document.querySelectorAll('.time-slot').forEach(el => {
    el.addEventListener('click', (event) => {
      const time = el.textContent.trim().replace(/[^0-9:]/g, '');
      const section = el.closest('section.bg-white');
      if (!section) return;
      const dateH2 = section.querySelector('h2.text-xl');
      if (!dateH2) return;

      const dateText = dateH2.textContent.trim(); // 10/07/2025
      const [day, month, year] = dateText.split('/');
      if (!day || !month || !year) return;
      const isoDate = `${year}-${month}-${day}`;

      const modal = document.getElementById('modalAgendamento');
      if (!modal) return;

      const modalDateInput = document.getElementById('modalDate');
      const modalTimeInput = document.getElementById('modalTime');
      if (modalDateInput) modalDateInput.value = isoDate;
      if (modalTimeInput) modalTimeInput.value = time;

      const clientSearchInput = document.getElementById('clientSearch');
      const clientIdHiddenInput = document.getElementById('clientId');
      const serviceNameInput = document.getElementById('serviceName');
      const servicePriceInput = document.getElementById('servicePrice');
      const serviceDurationInput = document.getElementById('serviceDuration');
      if(clientSearchInput) clientSearchInput.value = '';
      if(clientIdHiddenInput) clientIdHiddenInput.value = '';
      if(serviceNameInput) serviceNameInput.value = '';
      if(servicePriceInput) servicePriceInput.value = '';
      if(serviceDurationInput) serviceDurationInput.value = '';

      const rect = el.getBoundingClientRect();
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;

      const top = rect.top + scrollTop + el.offsetHeight + 8;
      let left = rect.left + scrollLeft;

      if (left + modal.offsetWidth > window.innerWidth) {
        left = window.innerWidth - modal.offsetWidth - 20;
      }

      modal.style.top = `${top}px`;
      modal.style.left = `${left}px`;
      modal.classList.remove('hidden');
      if(clientSearchInput) clientSearchInput.focus();
    });
  });

  // Fecha o modal
  function fecharModal() {
    const modal = document.getElementById('modalAgendamento');
    if (modal) {
      modal.classList.add('hidden');
      modal.style.top = '';
      modal.style.left = '';
    }
  }

  // Antes do submit, monta objeto services e preenche duração
  const modalForm = document.querySelector('#modalAgendamento form');
  if (modalForm) {
    modalForm.addEventListener('submit', function (e) {
      const clientIdHidden = document.getElementById('clientId');
      const clientSearchInput = document.getElementById('clientSearch');
      if (!clientIdHidden || !clientSearchInput) return;

      const clientId = clientIdHidden.value;
      const clientName = clientSearchInput.value;

      const clientExists = Array.isArray(clients) ? clients.find(c => c && c._id === clientId && c.name === clientName) : null;
      if (!clientId || !clientExists) {
        e.preventDefault();
        Swal.fire({
          icon: 'error',
          title: 'Cliente Inválido',
          text: 'Por favor, digite o nome e SELECIONE um cliente da lista antes de agendar.',
          confirmButtonColor: '#ef4444',
          background: '#fff1f2'
        });
        clientSearchInput.focus();
        return false;
      }

      const serviceNameInput = document.getElementById('serviceName');
      const servicePriceInput = document.getElementById('servicePrice');
      const serviceDurationInput = document.getElementById('serviceDuration');
      const servicesInputHidden = document.getElementById('servicesInput');
      const durationInputHidden = document.getElementById('durationInput');

      if (!serviceNameInput || !servicePriceInput || !serviceDurationInput || !servicesInputHidden || !durationInputHidden) return;

      const service = {
        name: serviceNameInput.value,
        price: parseFloat(servicePriceInput.value) || 0,
        payments: []
      };
      const duration = parseInt(serviceDurationInput.value, 10) || 30;

      servicesInputHidden.value = JSON.stringify([service]);
      durationInputHidden.value = duration;
    });
  }

  // Prompt motivo cancelamento (global)
  function promptCancelReason(form) {
      const reason = prompt("Por favor, insira o motivo do cancelamento (será visível para o cliente):");
      if (reason === null) return false;
      if (reason.trim() === "") {
          alert("O motivo do cancelamento é obrigatório.");
          return false;
      }
      const input = document.createElement('input');
      input.type = 'hidden';
      input.name = 'cancellationReason';
      input.value = reason.trim();
      form.appendChild(input);
      return true;
  }
</script>

<script>
  // SweetAlert via parâmetros da URL (success/error)
  const urlParams = new URLSearchParams(window.location.search);
  const successMsg = urlParams.get('success');
  const errorMsg = urlParams.get('error');

  if (successMsg) {
    window.history.replaceState({}, document.title, window.location.pathname + window.location.hash);
    Swal.fire({
      icon: 'success',
      title: 'Sucesso!',
      text: decodeURIComponent(successMsg),
      confirmButtonText: 'Fechar',
      confirmButtonColor: '#10b981',
      background: '#f0fdf4'
    });
  }

  if (errorMsg) {
    window.history.replaceState({}, document.title, window.location.pathname + window.location.hash);
    Swal.fire({
      icon: 'error',
      title: 'Erro',
      text: decodeURIComponent(errorMsg),
      confirmButtonText: 'Fechar',
      confirmButtonColor: '#ef4444',
      background: '#fff1f2'
    });
  }
</script>

</body>
</html>
